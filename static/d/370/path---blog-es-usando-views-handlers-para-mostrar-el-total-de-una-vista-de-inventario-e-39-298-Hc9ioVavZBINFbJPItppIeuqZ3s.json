{"data":{"config":{"html":"<p>Escrito por <strong>Kyle Mathews</strong>, quien vive y trabaja en San\nFrancisco, construyendo cosas útiles.\n<a href=\"https://twitter.com/kylemathews\">Deberías seguirlo en Twitter</a></p>","fields":{"slug":"/es/"},"frontmatter":{"title":"El Blog Inicial de Gatsby","language":"es"}},"markdownRemark":{"id":"00ee8e3b-4235-5714-b98f-4ab8dde5ac59","excerpt":"Hay veces que quieres desplegar información específica en una vista además de los datos que traes de tus nodos. Bien puede ser para…","html":"<p>Hay veces que quieres desplegar información específica en una vista además de los datos que traes de tus nodos. Bien puede ser para desplegar simplemente una descripción de tu vista, o tal vez un subtítulo con datos de tu argumento, o incluso un subtotal si estás mostrando datos de productos o algo así.</p>\n<p>Este tipo de cosas las puedes insertar en el header y footer de tu view. Y en los casos más sencillos puedes simplemente insertar un “text area” donde pongas el texto estático. Pero hay veces que quieres más ;-).</p>\n<p>Pudiera ser tentador habilitar el módulo “PHP Filter” y poner código de PHP ahí mismo en tu vista. Para algo sencillo puede ser suficiente, pero si tu código van a ser más de 3 líneas te recomiendo usar un views_handler que sirve precisamente para eso y así podrás meter tu código en un control de versiones y editarlo con vi o emacs.</p>\n<p>Manos a la obra, vamos a implementar un modulo views_total para desplegar el total de un inventario. El views_total.info está fácil:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">name = Views Total\ndescription = Implements an area handler to display the inventory summary\npackage = Other\ncore = 7.x\n\nfiles[] = views_total.module\ndependencies[] = &quot;views&quot;\n\n; Views handlers\nfiles[] = views_total_handler_area_summary.inc</code></pre></div>\n<p>El views_total.module simplemente implemente el hook_views_api para indicarle a views que existimos:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&amp;lt;?php\n\n/**\n * Implements hook_views_api().\n */\nfunction views_total_views_api() {\n  return array(\n    &#39;api&#39; =&amp;gt; 3,\n  );\n}</code></pre></div>\n<p>En el views_total.views.inc finalmente declaramos nuestro handler que va a estar en la “tabla global” porque no estámos adjuntándonos a ninguna tabla de nuestra BD.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&amp;lt;?php\n\n/**\n * Implements hook_views_data.\n */\nfunction views_total_views_data()\n{\n  $data = array();\n\n  $data[&#39;views_total&#39;][&#39;table&#39;][&#39;group&#39;] = t(&#39;Global&#39;);\n  $data[&#39;views_total&#39;][&#39;table&#39;][&#39;join&#39;] = array(\n    &#39;#global&#39; =&amp;gt; array(),\n  );\n\n  $data[&#39;views_total&#39;][&#39;summary&#39;] = array(\n    &#39;title&#39; =&amp;gt; t(&#39;Inventory summary&#39;),\n    &#39;help&#39; =&amp;gt; t(&#39;Display the total of items in the inventory&#39;),\n    &#39;area&#39; =&amp;gt; array(\n      &#39;handler&#39; =&amp;gt; &#39;views_total_handler_area_summary&#39;,\n    ),\n  );\n\n  return $data;\n}</code></pre></div>\n<p>Y finalmente, viene el bueno, nuestro handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&amp;lt;?php\n\n/**\n * Definir un area handler para que el total del inventario se pueda agregar a la vista\n */\nclass views_total_handler_area_summary extends views_handler_area {\n\n  function option_definition() {\n    $options = parent::option_definition();\n\n    // Quitamos opciones del formulario de edición del handler que no queramos.\n    // las opciones vienen heredadas del views_handler_area\n    unset($options[&#39;empty&#39;]);\n\n    return $options;\n  }\n\n  function options_form(&amp;amp;$form, &amp;amp;$form_state) {\n    parent::options_form($form, $form_state);\n\n    // Quitamos el empty también del display\n    unset($form[&#39;empty&#39;]);\n  }\n\n  // Esto es lo que se va a desplegar en la vista\n  function render($empty = FALSE) {\n    if (!$empty) {\n      $total = 0;\n      foreach ($this-&amp;gt;view-&amp;gt;result as $result) {\n        $total += $result-&amp;gt;node_taxonomy_index_nid;\n      }\n      return &quot;Total de equipos$total&quot;;\n    }\n\n    return &#39;&#39;;\n  }\n}</code></pre></div>\n<p>Puedes inspeccionar el $this->view->result con un print_r o un krumo (si tienes devel instalado) para ver qué variables te pueden servir.</p>\n<p>Para hacer este modulito me basé mucho en el código del submodulo line_item del módulo <a href=\"http://drupal.org/project/commerce\">commerce</a> para Drupal 7.</p>","frontmatter":{"title":"Usando views handlers para mostrar el total de una vista de inventario","date":"August 04, 2011","translations":null}}},"pageContext":{"slug":"/blog/es/usando-views-handlers-para-mostrar-el-total-de-una-vista-de-inventario/","language":"es","previous":{"fields":{"slug":"/blog/es/capitalizar-la-primer-letra-de-una-columna-en-mysql/"},"frontmatter":{"title":"Capitalizar la primer letra de una columna en MySQL"}},"next":{"fields":{"slug":"/blog/es/debuguear-php-con-emacs-xdebug-y-geben/"},"frontmatter":{"title":"Debuguear php con emacs, xdebug y geben"}}}}